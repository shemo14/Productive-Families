import React, { Component } from "react";import {View, Text, Image, TouchableOpacity, ImageBackground, AsyncStorage,} from "react-native";import {Container, Content, Form, Item, Input, Button, Toast, Icon,} from 'native-base'import styles from '../../assets/style'import i18n from '../../locale/i18n'import {DoubleBounce} from "react-native-loader";import {NavigationEvents} from "react-navigation";import * as Animatable from 'react-native-animatable';import { connect } from 'react-redux';import { chooseLang, profile, userLogin } from '../actions'import * as Permissions from 'expo-permissions';import { Notifications } from 'expo'import Spinner from "react-native-loading-spinner-overlay";class Login extends Component {	constructor(props){		super(props);		this.state = {			phone				: '',			password			: '',			deviceId			: '',			userId				: null,			type				: 0,			phoneStatus         : 0,			passwordStatus      : 0,			spinner             : false,		}	}	activeInput(type){		if (type === 'phone' || this.state.phone !== ''){			this.setState({ phoneStatus: 1 })		}		if (type === 'password' || this.state.password !== ''){			this.setState({ passwordStatus: 1 })		}	}	unActiveInput(type){		if (type === 'phone' && this.state.phone === ''){			this.setState({ phoneStatus: 0 })		}		if (type === 'password' && this.state.password === ''){			this.setState({ passwordStatus: 0 })		}	}	validate = () => {		let isError = false;		let msg = '';		if (this.state.phone.length <= 0) {			isError 	= true;			msg 		= i18n.t('namereq');		}else if (this.state.password.length <= 0) {			isError 	= true;			msg 		= i18n.t('pass');		}		if (msg !== ''){			Toast.show({				text		: msg,				type		: "danger",				duration	: 3000,				textStyle     : {					color           : "white",					fontFamily      : 'cairo',					textAlign       : 'center',				}			});		}		return isError;	};	renderSubmit(){		if (this.props.loading){			return(				<View style={{ justifyContent: 'center', alignItems: 'center' }}>					<DoubleBounce size={20} color="#B7264B" style={{ alignSelf: 'center' }} />				</View>			)		}		return (			<Button onPress={() => this.onLoginPressed()} style={styles.loginBtn}>				<Text style={styles.btnTxt}>{ i18n.t('loginButton') }</Text>			</Button>		);	}	onLoginPressed() {		this.setState({spinner: true});		const err = this.validate();		if (!err){			const {phone, password, deviceId} = this.state;			this.props.userLogin({ phone, password, deviceId }, this.props.lang);		}	}	async componentWillMount() {		const { status: existingStatus } = await Permissions.getAsync(			Permissions.NOTIFICATIONS		);		let finalStatus = existingStatus;		if (existingStatus !== 'granted') {			const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);			finalStatus = status;		}		if (finalStatus !== 'granted') {			return;		}		const deviceId = await Notifications.getExpoPushTokenAsync();		this.setState({ deviceId, userId: null });		AsyncStorage.setItem('deviceID', deviceId);	}	componentWillReceiveProps(newProps){		console.log('props auth ...', newProps.auth);		if (newProps.auth !== null && newProps.auth.key === 1){			if (this.state.userId === null){				this.setState({ userId: newProps.auth.data.id });				this.props.profile(newProps.auth.data.token);			}			this.props.navigation.navigate('drawerNavigator');		}		if (newProps.auth !== null) {			this.setState({spinner: false});			Toast.show({				text		: newProps.auth.msg,				type		: newProps.auth.key === 1 ? "success" : "danger",				duration	: 3000,				textStyle     : {					color           : "white",					fontFamily      : 'cairo',					textAlign       : 'center',				}			});		}	}	onFocus(){		this.componentWillMount()	}	render() {		return (			<Container>				<Spinner					visible           = { this.state.spinner }				/>				<NavigationEvents onWillFocus={() => this.onFocus()} />				<Content contentContainerStyle={styles.bgFullWidth}>					<ImageBackground source={require('../../assets/images/background.png')} style={[styles.bgFullWidth]}>						<View style={[styles.position_R, styles.bgFullWidth, styles.marginVertical_15, styles.SelfCenter, styles.Width_100]}>							<Animatable.View animation="fadeInDown" easing="ease-out" delay={500} style={[styles.flexCenter]}>								<View style={[styles.overHidden, styles.marginVertical_15]}>									<Image style={[styles.icoImage]} source={require('../../assets/images/logo.png')}/>								</View>							</Animatable.View>							<Form style={[styles.Width_100, styles.flexCenter, styles.marginVertical_10, styles.Width_90]}>								<View style={[styles.position_R, styles.overHidden, styles.height_70, styles.flexCenter ]}>									<Item floatingLabel style={[ styles.item, styles.position_R, styles.overHidden ]}>										<Input											placeholder             = {i18n.translate('phone')}											style                   = {[ styles.input , styles.height_50 , (this.state.phoneStatus === 1 ? styles.Active : styles.noActive )]}											onChangeText            = {(phone) => this.setState({phone})}											onBlur                  = {() => this.unActiveInput('phone')}											onFocus                 = {() => this.activeInput('phone')}											keyboardType            = {'number-pad'}										/>									</Item>									<View style = {[ styles.position_A , styles.bg_White, styles.flexCenter, styles.iconInput,  (this.state.phoneStatus === 1 ? styles.left_0 : styles.leftHidLeft )]}>										<Icon style = {[styles.text_orange, styles.textSize_22]} type="MaterialCommunityIcons" name='cellphone' />									</View>								</View>								<View style={[styles.position_R, styles.overHidden, styles.height_70, styles.flexCenter ]}>									<Item floatingLabel style={[ styles.item, styles.position_R, styles.overHidden ]}>										<Input											placeholder             = {i18n.translate('password')}											style                   = {[ styles.input , styles.height_50 , (this.state.passwordStatus === 1 ? styles.Active : styles.noActive )]}											onChangeText            = {(password) => this.setState({password})}											onBlur                  = {() => this.unActiveInput('password')}											onFocus                 = {() => this.activeInput('password')}											secureTextEntry										/>									</Item>									<View style = {[ styles.position_A , styles.bg_White, styles.flexCenter, styles.iconInput,  (this.state.passwordStatus === 1 ? styles.left_0 : styles.leftHidLeft )]}>										<Icon style = {[styles.text_orange, styles.textSize_22]} type="AntDesign" name='lock1' />									</View>								</View>								<TouchableOpacity onPress={() => this.props.navigation.navigate('ForgetPassword')} style={[ styles.marginVertical_5, styles.SelfRight ]}>									<Text style={[styles.textRegular, styles.textSize_14, styles.marginVertical_5, styles.text_gray]}>										{i18n.translate('forgetPassword')}									</Text>								</TouchableOpacity>								<TouchableOpacity									style={[										styles.bg_red,										styles.width_150,										styles.flexCenter,										styles.marginVertical_15,										styles.height_40									]}									onPress={() => this.onLoginPressed()}>									<Text style={[styles.textRegular , styles.textSize_14, styles.text_White]}>										{i18n.translate('login')}									</Text>								</TouchableOpacity>							</Form>							<View style={[styles.bg_lightWhite, styles.SelfLeft, styles.paddingHorizontal_10, styles.height_100, styles.centerContext, styles.marginVertical_25]}>								<TouchableOpacity onPress={() => this.props.navigation.navigate('Register')}												  style={[styles.bg_light_oran, styles.paddingHorizontal_10, styles.height_40, styles.centerContext]}>									<Text style={[styles.textRegular, styles.textSize_14, styles.text_red]}>										{i18n.translate('doHaveAcc')}									</Text>								</TouchableOpacity>							</View>						</View>					</ImageBackground>				</Content>			</Container>		);	}}const mapStateToProps = ({ auth, profile, lang }) => {	return {		loading		: auth.loading,		auth		: auth.user,		user		: profile.user,		lang		: lang.lang	};};export default connect(mapStateToProps, { userLogin, profile, chooseLang })(Login);